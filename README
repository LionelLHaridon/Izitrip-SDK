/*
 *
 * @project : Izitrip SDK
 * @package : Readme
 * @author : The Izitrip Team
 *
*/

-------------------------------------------------------------------------------

/*
 * Matteo - 24/11/2010 7 p.m
 * A few explanations ... 
*/

Why this Git ? What do we have to do ?
_________________________________
I've created this (temporary ?) Git to allow everyone in the team 
working on (and with) the Izitrip SDK :
We still have a few conventions to define (see http://mi-ni.me/fop 
for more details) and a few changes to make before having a REAL and FINAL Sdk.

So, the main goal of this Git is to work on these few steps, which are :
- Defining the better way to implement localization (internationalisation)
- Defining a convention about where files are going,and the way we'll name them
- Defining a convention about the code documentation
- Making sure that everyone is ok with this SDK, and that nothing have
been forgotten.
- Maybe implementing a few scripts that will be a part of the Sdk if
necessary.

We can discuss these points on the G.Group 
(here http://mi-ni.me/fop) and implement it here.

I've created a TO DO file (SDK_TODO), where we can define what is 
it necessary to implement/change in this SDK.

When you make important changes on this SDK, or when you see that a convention
is adopted, please write it down in the apropriate file, such as here, 
in the SDK_TODO file, in the CONVENTIONS. Thank you =).
 
When we'll all be OK about this SDK, we'll could close this Git, 
save the SDK apart, and begin the real work on Izitrip =).




/!\ IMPORTANT /!\
__________________
Phillip have opened a Playground to experiment stuff, just here :
  https://github.com/pnuzhnyy/sc-playground/
  
We can use it to start working on ideas !
Please contact him to get an access =).
The SDK used should be the same as here. 
If this SDK change, please commit it on the Playground.
 
 
 
 
The "CONVENTIONS" file
_________________________________
The "CONVENTIONS" file is here to define a few conventions about 
coding for Izitrip, and about this perticular SDK.
These conventions have been discussed on the G.Group (here http://mi-ni.me/fop 
and here http://mi-ni.me/rj7), and can, of course, be modified =).

There's a few points to discuss, as i said earlier, so please take part of
the discussion the Izitrip's Google Group =)




What this SDK is supporting already ?
_________________________________
So, this SDK is working with the Code Igniter PHP Framework, 
and Thrift, a RPC Framework.

Code Igniter :
  http://codeigniter.com/
  http://codeigniter.com/user_guide/
Thrift :
  http://thrift.apache.org/
  

This SDK is already supporting :

- The auto-loading of the Thrift's PHP Core
- The auto-loading of the Thrift's generated PHP files  such as 
data objects, exceptions, services interfaces ...
- The auto-loading of tSerialize() and tUnserialize() functions, aimed 
to work on seralization with Thirft's data objects, implemented as C.Igniter's 
helpers, so you can use it in a very simple way.

Please take a look the CONVENTIONS file to see how to implement porperly 
and use Thrift in this SDK.

Here is a "short" example showing how to use a thrift data object with
tSerialize(), tUnserialize() functions :
[[

	In this exemple, is use the following Thrift structure :

		struct LoremIpsumData {
		  1: string lorem,
		  2: string ipsum,
		}
		
	loremipsum.thrif 
		was in system/application/libraries/thrift/shapes 

	loremipsum_types.php (generated by the Thrift compiler)
		was in system/application/libraries/thrift/packages/loremipsum/

	<?php
	class Test extends Controller
	{
	  // Loading the CI Controller stuff and all ...
	  function Test () {
		parent::Controller();
	  }
	  
	  function index() {		
		try {
		  // Creating an object from a Thrift Structure, (which is autoloaded by Code Igniter)
		  $a = new LoremIpsumData(); 
		  $a->lorem = 'Startup'; // With a few data in it ...
		  $a->ipsum = 'Club';
		
		  // Serializing the object
		  $serialized = tSerialize($a); // $serialized now contains the binary serialization of $a
		
		  // Creating a new object from the same Thrift Structure, empty this time.
		  $b = new LoremIpsumData();
		  
		  // Setting up the new object content with the informations serialized just before
		  tUnserialize($b, $serialized); // As you can see, this method puts directly informations info the objet
		  
		  // Then, you'r $b object contains the data we've
		  echo $b->lorem.' '.$b->ipsum;
		  
		}
		catch( Exception $e ) { echo $e->getMessage(); }
	  }
	}
	?>
	
]]




In conclusion
_________________________________
Let's go, folks =) !


-------------------------------------------------------------------------------