/*
 *
 * @project : Izitrip SDK
 * @package : CONVENTIONS
 * @author : The Izitrip Team
 *
*/

-------------------------------------------------------------------------------

//-----------------------------------------------------
//
// Coding Conventions 
//
//-----------------------------------------------------

Indentation :
_____________
  Use 2 spaces by level, and no tab.
  

Using braces :
___________
  This way ...
  public function name($data) {
    instruction();
  }
  
  
Comments :
___________
  In code, use only inline comments ( // ) to allow
  the /* */ blocks to shut down a code block.
  
  At the begining of your files, use this :
  /** 
  * 
  * @param ... 
  * @return ... 
  * @throws ... 
  */ 
 
 
Errors handling :
___________________
  We'll use exceptions throwing/catching.
  We'll use only one exception class with different levels, and
  declare it in Thrift, this way :
  
  enum IziTripExceptionCode { 
    FIRST_TYPE_OF_EXCEPTION = 1, 
    SECOND_TYPE_OF_EXCEPTION = 2, 
    ... 
  } 

  exception IziTripException { 
    1: IziTripExceptionCode code, 
  }   
  
  
Casing :
___________________
  We'll use camel casing, like this : fooBar (instead of foo_bar)
  Classes will all begin with a uppercase caracter,
  Methods will a lowercase caracter
 
-------------------------------------------------------------------------------
 
//-----------------------------------------------------
//
// Files and organisation conventions
//
//-----------------------------------------------------

MVC model :
____________
We'll use Code Igniter in the MVC way :
 
    One class in /models/ , implementing the service interface drawn 
	with Thrift, called MyServiceModel for exemple.
	
    One class in /controllers/ , which will be our front controler for 
	the functionality and which name will be user making the url.
    So we can name these classes as short as possible (MyService for exemple).
	
  Each logical "block" will have his own directory in this MVC model, 
  like this for "MyService" :
  /models/myservice/ , /controllers/myservice/ , /views/myservice/.
  
  Each file need to be named using lowercase caracters only.
  
  Also, we can create a "main" directory in /views/ containing the commonly used views (header, footer ...).
  
  
C.Igniter conventions :
________________________
We'll respect Code Igniter conventions about libraries, helpers, ect, 
in a way to ease the organisation of work.
Please see the C.Igniter conventions about this : http://codeigniter.com/user_guide/


Thrift Files :
_______________
Thrift "shapes" are stored in /system/application/libraries/thrift/shapes/.
One directory for one block of services/structures/fonctions.
These are (with the Thrift PHP library) the only Thrift related 
content we'll keep generated in the SDK.

Thrift's PHP generated files (Data objets, services interfaces) will be 
located in /system/application/libraries/thrift/packages/ .

These files will be generated by an application deployment script when we'll
have a server. 
So, when you'll work with the SDK, you'll have to generate manually
these PHP data objects and services inferfaces file, and never forget
to delete them before commiting in the Git =)..


Static files :
_______________
Static files (css, js, images ect...) will be stored in a "static" directory, 
located at the root of the project.
[NB : We need to find a convention about how naming the cached files]

-------------------------------------------------------------------------------

//-----------------------------------------------------
//
// Database Conventions
//
//-----------------------------------------------------

Defining fields, working with Thrift's serialization :
______________________________________________________
Building the tables, we should only define separate fields for the datas 
that will be needed to perform searches.
To store the other datas, we use a BLOB-typed field (that we could call 
"data" for exemple), which contains a (full) serialized Thrift Data Object.

Here is a little exemple :

  For a common "User" thrift structure like this,
  struct User {
	1: string name,
	2: string email,
	3: string description,
	4: string siteUrl,
	5: string avatarUrl,
  }
  
  The associated table would look like this,
  | id | name | email | data |
  
The full Data object is stored is the BLOB field (not only the
description, siteUrl and avatarUrl fields !!!).

This SDK is auto-loading two functions to handle the serialization :
tSerialize() and tUnserialize(), which are aimed to manipulate thrift's 
data objects.

A little more informations about these two functions :

 //  Thrift data object serializer, returns the serialized content
 [mixed] tSerialize( $object );
 
 // Unserialize and loads up content into a Thrift data object
 [void] tUnserialize( $object, $serializedContent );
 
 Take care of using these functions into a try/catch block !